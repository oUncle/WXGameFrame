{"version":3,"sources":["assets\\Script\\Manager\\HttpManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\nexport default class HttpManager {\n    private static _instance: HttpManager = null;\n\n     /**\n     * getInstance\n     */\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new HttpManager();\n        }\n        return this._instance;\n    }\n\n    private httpEvents(xhr, responseHandler) {\n        // Simple events\n        ['abort', 'error', 'timeout'].forEach(function (eventname) {\n            xhr[\"on\" + eventname] = function () {\n                responseHandler(xhr.status, eventname);\n            }\n        })\n\n        // Special event\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                // cc.log(\"onreadystatechange\",xhr.responseType,xhr.response)\n                if (xhr.responseType == \"text\") {\n                    responseHandler(xhr.status, xhr.responseText);\n                    // cc.log('HttpManager ',xhr.responseText);\n                } else {\n                    responseHandler(xhr.status, xhr.response);\n                    // cc.log('HttpManager ',xhr.response);\n                }\n            }\n        }\n    }\n\n    /**\n     * httpGet\n     */\n    public httpGet(url, handler, responseType=\"text\",headers=null, timeout=10000) {\n        let xhr = new XMLHttpRequest();\n        this.httpEvents(xhr, handler);\n        xhr.open(\"GET\", url, true)\n        cc.log('HttpManager httpGet'+\"url= \",url);\n        if (CC_JSB) {\n            xhr.setRequestHeader(\"Accept-Encoding\",\"gzip,deflate\");\n        }\n\n        if (headers) {\n            for (const key in headers) {\n                xhr.setRequestHeader(key+\"\", headers[key]+\"\");\n            }\n        }\n        \n        if (responseType == \"text\") {\n            xhr.setRequestHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n        } else if (responseType == \"json\") {\n            xhr.setRequestHeader(\"content-type\", \"application/json\");\n        } else if (responseType == \"arraybuffer\") {\n            xhr.setRequestHeader(\"content-type\", \"application/octet-stream\");\n        }\n\n        xhr.timeout = timeout\n        xhr.responseType = (responseType as XMLHttpRequestResponseType);\n\n        xhr.send()\n    }\n\n    /**\n     * httpPost\n     */\n    public httpPost(url, body, handler, responseType=\"text\",headers=null, timeout=10000) {\n        let xhr = new XMLHttpRequest();\n        this.httpEvents(xhr, handler);\n        xhr.open(\"POST\", url);\n        \n        cc.log('HttpManager '+\"url= \",url,\"\\nbody =\",body);\n        if (headers) {\n            for (const key in headers) {\n                xhr.setRequestHeader(key+\"\", headers[key]+\"\");\n            }\n        }\n        \n        // if (CC_JSB) {\n        //     xhr.setRequestHeader(\"content-length\", body?body.length:0)\n        // }\n        \n        if (responseType == \"text\") {\n            xhr.setRequestHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n        } else if (responseType == \"json\") {\n            xhr.setRequestHeader(\"content-type\", \"application/json\");\n        } else if (responseType == \"arraybuffer\") {\n            xhr.setRequestHeader(\"content-type\", \"application/octet-stream\");\n        }\n        \n        xhr.timeout = timeout\n        xhr.responseType = (responseType as XMLHttpRequestResponseType);\n\n        xhr.send(body)\n    }\n}\n"]}