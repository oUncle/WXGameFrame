{"version":3,"sources":["assets\\Script\\Manager\\SpineManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\n\n\nexport default class SpineManager {\n    private _skeletonDatas: any = {};\n    private _superior: any = {};\n    private _soldierBundle = null\n\n    private static _instance: SpineManager = null;\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new SpineManager();\n        }\n        return this._instance;\n    }\n\n    private _isNull(arg) {\n        return arg == null || arg == undefined;\n    }\n\n    private _getSkeletonData(name: string, superior: string): sp.SkeletonData {\n        if (this._skeletonDatas[name]) {\n            // cc.log(\"_getSpriteFarme\",name);\n            this._addSuperiorData(name, superior);\n            return this._skeletonDatas[name];\n        }\n\n        return null;\n    }\n\n    private _addSuperiorData(path: string, superior: string) {\n        if (this._isNull(this._superior[superior])) {\n            this._superior[superior] = {};\n        }\n        if (this._isNull(this._superior[superior][path])) {\n            this._superior[superior][path] = true;\n        }\n    }\n\n    private _checkSuperior(superior: string) {\n        let clearList: string[] = [];\n        if (this._isNull(this._superior[superior])) {\n            return clearList;\n        }\n        for (let skey in this._superior[superior]) {\n            let isHave = false;\n            for (let key in this._superior) {\n                if (key == superior) {\n                    continue;\n                }\n                for (let kk in this._superior[key]) {\n                    if (kk == skey) {\n                        isHave = true;\n                        break;\n                    }\n                }\n                if (isHave) {\n                    break;\n                }\n            }\n            if (!isHave) {\n                clearList.push(skey);\n            }\n        }\n        return clearList;\n    }\n\n    private _checkPathSuperior(path: string, superior: string) {\n        let clearList: string[] = [];\n        if (this._isNull(this._superior[superior])) {\n            return clearList;\n        }\n        let isHave = false;\n        for (let key in this._superior) {\n            if (key == superior) {\n                continue;\n            }\n            for (let kk in this._superior[key]) {\n                if (kk == path) {\n                    isHave = true;\n                    break;\n                }\n            }\n        }\n        if (!isHave) {\n            clearList.push(path);\n        }\n        return clearList;\n    }\n\n    public preloadSkeletonData(path: string, superior: string, cb: Function) {\n        if (this._skeletonDatas[path]) {\n            this._addSuperiorData(path, superior);\n            cb(path + \"*@*\" + superior);\n            cc.log(\"preloadSkeletonData have \", path);\n            return;\n        }\n        cc.resources.load(path, sp.SkeletonData, (err, skeletonData) => {\n            if (err) {\n                cc.log(\"loadSkeletonData err\", err);\n                cb(path + \"*@*\" + superior);\n                return;\n            }\n            cc.log(\"preloadSkeletonData have \", path);\n            this._skeletonDatas[path] = skeletonData;\n            this._addSuperiorData(path, superior);\n            skeletonData.addRef()\n            cb(path + \"*@*\" + superior);\n        })\n    }\n\n    public async loadBundleSkeletonData(path: string, superior: string = \"\"): Promise<sp.SkeletonData> {\n        return new Promise<sp.SkeletonData>((resolve, reject) => {\n            if (this._skeletonDatas[path]) {\n                cc.log(\"loadskeletonData have \", path);\n                this._addSuperiorData(path, superior);\n                resolve(this._skeletonDatas[path]);\n                return;\n            }\n            let bundle = cc.assetManager.getBundle(\"PlayerEffect\");\n            bundle.load(path, sp.SkeletonData, (err, skeletonData) => {\n                if (err) {\n                    cc.warn(\"loadskeletonData err\", err);\n                    resolve(null);\n                    return;\n                }\n                this._skeletonDatas[path] = skeletonData;\n                // cc.log(\"loadskeletonData nononohave \",path);\n                this._addSuperiorData(path, superior);\n                skeletonData.addRef()\n                resolve(skeletonData as sp.SkeletonData);\n            });\n        });\n    }\n\n    public async loadSkeletonData(path: string, superior: string = \"\"): Promise<sp.SkeletonData> {\n        return new Promise<sp.SkeletonData>((resolve, reject) => {\n            if (this._skeletonDatas[path]) {\n                cc.log(\"loadskeletonData have \", path);\n                this._addSuperiorData(path, superior);\n                resolve(this._skeletonDatas[path]);\n                return;\n            }\n            cc.resources.load(path, sp.SkeletonData, (err, skeletonData) => {\n                if (err) {\n                    cc.warn(\"loadskeletonData err\", err);\n                    resolve(null);\n                    return;\n                }\n                this._skeletonDatas[path] = skeletonData;\n                // cc.log(\"loadskeletonData nononohave \",path);\n                this._addSuperiorData(path, superior);\n                skeletonData.addRef()\n                resolve(skeletonData as sp.SkeletonData);\n            });\n        });\n    }\n\n    public async getBundleSkeletonData(name: string, superior: string = \"\") {\n        // return this._getSpriteFarme(name);\n        let sf: sp.SkeletonData = await this.loadBundleSkeletonData(name, superior);\n        if (sf) {\n            return sf;\n        }\n        return await this.loadSkeletonData(name, superior);\n    }\n\n    public async getSkeletonData(name: string, superior: string = \"\") {\n        // return this._getSpriteFarme(name);\n        let sf: sp.SkeletonData = this._getSkeletonData(name, superior);\n        if (sf) {\n            return sf;\n        }\n        return await this.loadSkeletonData(name, superior);\n    }\n\n    /**\n     * 播放spine动画回调接口\n     * @param spine  动画\n     * @param listener \n     * @param name \n     * @param loop boolen 默认不循环\n     * @param hideOnComplete bool 默认隐藏\n     * @returns \n     */\n    public playSpineAni(spine: sp.Skeleton, listener: any = null, name: string = \"\", loop: boolean = false, hideOnComplete: boolean = true) {\n        if (spine == null || !spine.isValid) {\n            // if(Global.showLog == true)\n            cc.warn(\"spine 动画为空\", name);\n            return;\n        }\n        if (!name) {\n            cc.warn(\"spine 动画名为空\", spine.skeletonData.name, spine.node.name);\n            return;\n        }\n        // spine.node.active = false;\n        // spine.node.active = true;\n\n        if (!spine.isAnimationCached()) {\n            spine.clearTracks();\n        }\n        spine.setToSetupPose();\n        spine.setAnimation(0, name, loop);\n        // spine.animation = name;\n        // spine.loop = loop;\n\n        spine.setCompleteListener(() => {\n            if (hideOnComplete) {\n                spine.node.active = false;\n                // spine.node.opacity = 0;\n            }\n\n            if (listener != null) {\n                listener();\n            }\n        });\n    }\n\n    /**\n     * 播放spine动画随机起始时间回调接口\n     * @param spine  动画\n     * @param listener \n     * @param name \n     * @param startdt 起始时间，0到1之间，(0,1) // 小于等于0 或 大于等于1 为随机起始时间\n     * @param loop boolen 默认不循环\n     * @param hideOnComplete bool 默认隐藏\n     * @returns \n     */\n    public playSpineAniByStart(spine: sp.Skeleton, listener: any = null, name: string = \"\", startdt: number = 0, loop: boolean = false, hideOnComplete: boolean = true) {\n        if (spine == null || !spine.isValid) {\n            // if(Global.showLog == true)\n            cc.warn(\"spine 动画为空\", name);\n            return;\n        }\n        if (!name) {\n            cc.warn(\"spine 动画名为空\", spine.node.name);\n            return;\n        }\n        // spine.node.active = false;\n        // spine.node.active = true;\n\n        if (!spine.isAnimationCached()) {\n            spine.clearTracks();\n        }\n        spine.setToSetupPose();\n        let track: sp.spine.TrackEntry = spine.setAnimation(0, name, loop);\n        if (!track && spine.isAnimationCached()) {\n            track = spine.getCurrent(0);\n        }\n        if (startdt <= 0 || startdt >= 1) {\n            track.animationStart = Math.random();\n        } else {\n            track.animationStart = startdt;\n        }\n        // spine.animation = name;\n        // spine.loop = loop;\n\n        spine.setCompleteListener(() => {\n            track.animationStart = 0;\n            if (hideOnComplete) {\n                spine.node.active = false;\n                // spine.node.opacity = 0;\n            }\n\n            if (listener != null) {\n                listener();\n            }\n        });\n    }\n\n    public clearObject(path: string, superior: string) {\n        let clearList = this._checkPathSuperior(path, superior);\n        if (this._superior[superior] && this._superior[superior][path]) {\n            delete this._superior[superior][path];\n        }\n        for (let i = 0; i < clearList.length; ++i) {\n            if (this._skeletonDatas[clearList[i]]) {\n                this._skeletonDatas[clearList[i]].decRef()\n                delete this._skeletonDatas[clearList[i]];\n            }\n        }\n        // MemoryManager.getInstance().removeMeoryAsset(clearList);\n    }\n\n    public clearSuperiorObject(superior: string) {\n        let clearList = this._checkSuperior(superior);\n        if (this._superior[superior]) {\n            delete this._superior[superior];\n        }\n        for (let i = 0; i < clearList.length; ++i) {\n            if (this._skeletonDatas[clearList[i]]) {\n                this._skeletonDatas[clearList[i]].decRef()\n                delete this._skeletonDatas[clearList[i]];\n            }\n        }\n        // MemoryManager.getInstance().removeMeoryAsset(clearList);\n    }\n\n    public clearAllSuperiorObject() {\n        for (const key in this._superior) {\n            this.clearSuperiorObject(key);\n\n            delete this._superior[key];\n        }\n\n        // MemoryManager.getInstance().removeMeoryAsset(clearList);\n    }\n}\n"]}