{"version":3,"sources":["assets\\Script\\Manager\\SpriteManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\n\nexport default class SpriteManager {\n\n    private static _instance: SpriteManager = null;\n    private _spriteFrames: any = {};\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new SpriteManager();\n            this._instance._init();\n        }\n        return this._instance;\n    }\n\n    public static destroyInstance() {\n        if (this._instance) {\n            this._instance._destroy();\n            delete this._instance;\n            this._instance = null;\n        }\n    }\n\n    private _init() {\n\n    }\n\n    private _destroy() {\n\n    }\n\n    public async setBundleSpriteFrameByName(sprite: cc.Sprite, spriteFrameName: string) {\n        if (!sprite) {\n            return;\n        }\n        if (!Boolean(spriteFrameName)) {\n            cc.warn(\"setSpriteFrameByName spriteFrameName is null\");\n            return;\n        }\n        let frame = await this.getBundleSpriteFrame(spriteFrameName);\n        if (sprite && cc.isValid(sprite) && cc.isValid(sprite.node)) {\n            if (frame) {\n                sprite.spriteFrame = frame;\n            }\n        }\n    }\n\n    private async getBundleSpriteFrame(spriteFrameName: string) {\n        let sp = this._spriteFrames[spriteFrameName]\n        if (sp) {\n            return sp\n        }\n        return await this.loadBundleSpriteFrame(spriteFrameName);\n    }\n\n    private async loadBundleSpriteFrame(path: string): Promise<cc.SpriteFrame> {\n        return new Promise<cc.SpriteFrame>((resolve, reject) => {\n            if (this._spriteFrames[path]) {\n                resolve(this._spriteFrames[path]);\n                return;\n            }\n            let bundle = cc.assetManager.getBundle(\"PlayerEffect\");\n            if (!bundle) {\n                cc.warn(\"Game分包还没加载,图片路径\", path);\n                resolve(null);\n                return;\n            }\n            bundle.load(path, cc.SpriteFrame, (err, spriteFrame) => {\n                if (err) {\n                    cc.warn(\"loadSpriteFrame err\", path, err);\n                    resolve(null);\n                    return;\n                }\n                this._spriteFrames[path] = spriteFrame;\n                spriteFrame.addRef()\n                resolve(spriteFrame as cc.SpriteFrame);\n            });\n        });\n    }\n\n    public async setSpriteFrameByName(sprite: cc.Sprite, spriteFrameName: string) {\n        if (!sprite) {\n            return;\n        }\n        if (!Boolean(spriteFrameName)) {\n            cc.warn(\"setSpriteFrameByName spriteFrameName is null\");\n            return;\n        }\n        let frame = await this.getSpriteFrame(spriteFrameName);\n        if (sprite && cc.isValid(sprite) && cc.isValid(sprite.node)) {\n            if (frame) {\n                sprite.spriteFrame = frame;\n            }\n        }\n\n    }\n\n    private async getSpriteFrame(spriteFrameName: string) {\n        let sp = this._spriteFrames[spriteFrameName]\n        if (sp) {\n            return sp\n        }\n        return await this.loadSpriteFrame(spriteFrameName);\n    }\n\n    private async loadSpriteFrame(path: string): Promise<cc.SpriteFrame> {\n        return new Promise<cc.SpriteFrame>((resolve, reject) => {\n            if (this._spriteFrames[path]) {\n                resolve(this._spriteFrames[path]);\n                return;\n            }\n            cc.resources.load(path, cc.SpriteFrame, (err, spriteFrame) => {\n                if (err) {\n                    cc.warn(\"loadSpriteFrame err\", path, err);\n                    resolve(null);\n                    return;\n                }\n                this._spriteFrames[path] = spriteFrame;\n                spriteFrame.addRef()\n                resolve(spriteFrame as cc.SpriteFrame);\n            });\n        });\n    }\n}\n"]}