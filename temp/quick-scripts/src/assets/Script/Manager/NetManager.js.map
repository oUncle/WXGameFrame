{"version":3,"sources":["assets\\Script\\Manager\\NetManager.ts"],"names":[],"mappings":";;;;;;AACA;IAAA;QAEY,eAAU,GAAc,IAAI,CAAA;QAC5B,gBAAW,GAAY,KAAK,CAAA;IAsFxC,CAAC;IApFiB,sBAAW,GAAzB;QACI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,IAAI,CAAC,SAAS,GAAG,IAAI,UAAU,EAAE,CAAC;SACrC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,4BAAO,GAAP;QAAA,iBAsCC;QArCG,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS,CAAC,yBAAyB,CAAC,CAAC;QAC3D,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,aAAa,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,UAAC,GAAG;YACzB,EAAE,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YAC5B,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,kFAAkF;YAClF,4BAA4B;QAChC,CAAC,CAAA;QACD,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,UAAC,GAAG;YAC5B,EAAE,CAAC,GAAG,CAAC,aAAa,EAAC,GAAG,EAAE,KAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;YACjD,wCAAwC;YACxC,6CAA6C;YAC7C,0CAA0C;YAC1C,qCAAqC;YACrC,wBAAwB;YACxB,yBAAyB;YACzB,kDAAkD;YAClD,eAAe;YACf,2CAA2C;YAC3C,QAAQ;YAER,qCAAqC;YACrC,0CAA0C;YAC1C,gCAAgC;YAChC,kFAAkF;YAClF,eAAe;YACf,4DAA4D;YAC5D,kGAAkG;YAClG,6FAA6F;YAC7F,6FAA6F;YAC7F,iEAAiE;YACjE,sEAAsE;YAEtE,QAAQ;YACR,IAAI;QACR,CAAC,CAAA;IACL,CAAC;IAEM,iCAAY,GAAnB;QACI,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YACxB,OAAO,IAAI,CAAC,UAAU,CAAC;YACvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SAC1B;IACL,CAAC;IAEO,4BAAO,GAAf,UAAgB,IAAS;QACrB,IAAI,KAAK,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;QACjC,OAAO,KAAK,CAAA;QACZ,IAAI,OAAO,GAAG,EAAE,CAAC;QAEjB,IAAI,GAAG,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACjC,IAAI,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACxC,IAAI,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAExC,8CAA8C;QAE9C,8BAA8B;QAC9B,eAAe;QACf,6BAA6B;QAC7B,6BAA6B;QAC7B,0BAA0B;QAC1B,mCAAmC;QACnC,WAAW;QACX,sBAAsB;QACtB,IAAI;QAEJ,qBAAqB;QACrB,kBAAkB;IAItB,CAAC;IAvFc,oBAAS,GAAe,IAAI,CAAC;IAwFhD,iBAAC;CAzFD,AAyFC,IAAA;kBAzFoB,UAAU","file":"","sourceRoot":"/","sourcesContent":["\nexport default class NetManager {\n    private static _instance: NetManager = null;\n    private _websocket: WebSocket = null\n    private _isNetClose: boolean = false\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new NetManager();\n        }\n        return this._instance;\n    }\n\n    connect() {\n        this.closeConnect();\n        this._websocket = new WebSocket(\"ws://150.158.50.53:8988\");\n        this._websocket.binaryType = \"arraybuffer\";\n        this._websocket.onopen = (evt) => {\n            cc.log(\"onMessage: onOpen\");\n            this._isNetClose = false;\n            // GameEventManager.getInstance().dispathcGameEvent(GameEvent.NET_CLIENT_CONNECT);\n            // this.startSendHeartMsg();\n        }\n        this._websocket.onmessage = (evt) => {\n            cc.log('onMessage: ',evt, this._decode(evt.data))\n            // let msgList = this._decode(evt.data);\n            // for (let i = 0; i < msgList.length; i++) {\n            //     const msg: NetMsgInfo = msgList[i];\n            //     // cc.log(\"onMessage\", msg.id)\n            //     let msgEx = null;\n            //     if (IS_MSG_BYTE) {\n            //         msgEx = this.popWaitMsg(msg.requestId);\n            //     } else {\n            //         msgEx = this.popWaitMsg(msg.id);\n            //     }\n\n            //     this._closeNetLoading(msg.id);\n            //     // cc.log(\"lklkkl \",msg.errorCode);\n            //     if (msg.errorCode == 0) {\n            //         NetEventManager.getInstance().dispatchNetEvent(msg.id, msg.msg, msgEx);\n            //     } else {\n            //         // let errorText = ErrorCode.datas[msg.errorCode]\n            //         let errorText = (<TranslationConfig>TranslationConfigConfig.datas[msg.errorCode]).text;\n            //         cc.log(\"error messageid \", msg.id, \" errorcode \", msg.errorCode, \"   \", errorText)\n            //         NetEventManager.getInstance().dispatchNetErrorEvent(msg.id, msg.errorCode, msgEx);\n            //         cc.log(\"dispatchNetErrorEvent\", msg.id, msg.errorCode)\n            //         WindowManager.getInstance().showNetErrorTip(msg.errorCode);\n\n            //     }\n            // }\n        }\n    }\n\n    public closeConnect() {\n        this._isNetClose = true;\n        if (this._websocket) {\n            this._websocket.close();\n            delete this._websocket;\n            this._websocket = null;\n        }\n    }\n\n    private _decode(data: any) {\n        let bytes = new Uint8Array(data);\n        return bytes\n        let msgList = [];\n\n        let dvb = new DataView(bytes.buffer);\n        let id = dvb.getUint16(0, false);\n        let requestId = dvb.getUint16(2, false);\n        let errorCode = dvb.getUint16(4, false);\n\n        // cc.log(\"_decode\", id, requestId, errorCode)\n\n        // let msg = new NetMsgInfo();\n        // msg.id = id;\n        // msg.requestId = requestId;\n        // msg.errorCode = errorCode;\n        // if (bytes.length > 6) {\n        //     msg.msg = bytes.subarray(6);\n        // } else {\n        //     msg.msg = null;\n        // }\n\n        // msgList.push(msg);\n        // return msgList;\n\n\n\n    }\n}\n"]}