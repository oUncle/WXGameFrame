{"version":3,"sources":["assets\\Script\\plugins\\SkeletonExt.js"],"names":["cc","game","once","EVENT_ENGINE_INITED","js","mixin","sp","Skeleton","prototype","update","dt","CC_EDITOR","engine","_animatingInEditMode","animatingInEditMode","paused","timeScale","isAnimationCached","_isAniComplete","_animationQueue","length","_headAniInfo","frameCache","_frameCache","isInvalid","updateToFrame","frames","_curFrame","shift","_accTime","delay","aniInfo","setAnimation","animationName","loop","_updateCache","_updateRealtime","makeSkinIno","sf","texture","getTexture","rect","getRect","origSize","getOriginalSize","offset","getOffset","rotate","isRotated","w","width","h","height","info","v2","x","y","degrees","changeSlotSkin","slotName","skinInfo","sys","isNative","spineSkeletonData","SkeletonData","textureIdx","recordTexture","spTex","middleware","Texture2D","setRealTextureIndex","setPixelsHigh","setPixelsWide","setNativeTexture","getImpl","_nativeSkeleton","updateRegion","slot","findSlot","attachment","getAttachment","isMesh","spine","MeshAttachment","isRegion","RegionAttachment","copy","name","tex2dW","tex2dH","skelTex","SkeletonTexture","setRealTexture","region","TextureAtlasRegion","originalWidth","originalHeight","offsetX","offsetY","u","v","u2","renderObject","page","updateUVs","setRegion","uvs","updateOffset","setAttachment","setSlotVisible","visible","setBoneVisible"],"mappings":"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","sourceRoot":"/","sourcesContent":["\ncc.game.once(cc.game.EVENT_ENGINE_INITED, function () {\n\n    cc.js.mixin(sp.Skeleton.prototype, {\n        update(dt) {\n            // if (CC_EDITOR) return;\n\n            if (CC_EDITOR) {\n                cc.engine._animatingInEditMode = 1;\n                cc.engine.animatingInEditMode = 1;\n            }\n\n            if (this.paused) return;\n\n            dt *= this.timeScale * sp.timeScale;\n\n            if (this.isAnimationCached()) {\n\n                // Cache mode and has animation queue.\n                if (this._isAniComplete) {\n                    if (this._animationQueue.length === 0 && !this._headAniInfo) {\n                        let frameCache = this._frameCache;\n                        if (frameCache && frameCache.isInvalid()) {\n                            frameCache.updateToFrame();\n                            let frames = frameCache.frames;\n                            this._curFrame = frames[frames.length - 1];\n                        }\n                        return;\n                    }\n                    if (!this._headAniInfo) {\n                        this._headAniInfo = this._animationQueue.shift();\n                    }\n                    this._accTime += dt;\n                    if (this._accTime > this._headAniInfo.delay) {\n                        let aniInfo = this._headAniInfo;\n                        this._headAniInfo = null;\n                        this.setAnimation(0, aniInfo.animationName, aniInfo.loop);\n                    }\n                    return;\n                }\n\n                this._updateCache(dt);\n            } else {\n                this._updateRealtime(dt);\n            }\n        },\n        makeSkinIno(sf) {\n            let texture = sf.getTexture()\n            let rect = sf.getRect()\n            let origSize = sf.getOriginalSize()\n            let offset = sf.getOffset()\n            let rotate = sf.isRotated()\n\n            // 匹配原生端字段名\n            rect.w = rect.width\n            rect.h = rect.height\n\n            let info = {\n                rect: rect,\n                origSize: origSize,\n                offset: cc.v2(\n                    (origSize.width - rect.width) * 0.5 + offset.x,\n                    (origSize.height - rect.height) * 0.5 + offset.y\n                ),\n                degrees: rotate ? 270 : 0,\n                texture: texture,\n            }\n\n            return info\n        },\n        //局部换装\n        changeSlotSkin(slotName, sf) {\n            let skinInfo = this.makeSkinIno(sf);\n            if (cc.sys.isNative) {\n                let texture = skinInfo.texture;\n                const spineSkeletonData = sp.SkeletonData.prototype;\n                const textureIdx = spineSkeletonData.recordTexture(texture);\n                const spTex = new middleware.Texture2D();\n                // spTex.setRealTexture(tex2d);\n                spTex.setRealTextureIndex(textureIdx);\n                spTex.setPixelsHigh(texture.height);\n                spTex.setPixelsWide(texture.width);\n                spTex.setNativeTexture(texture.getImpl());\n                if (this._nativeSkeleton) {\n                    this._nativeSkeleton.updateRegion(slotName, spTex, skinInfo.rect, skinInfo.origSize, skinInfo.offset, skinInfo.degrees)\n                }\n            } else {\n                const slot = this.findSlot(slotName);\n                if (!slot) return;\n                let attachment = slot.getAttachment();\n\n                if (!attachment) return;\n                const isMesh = attachment instanceof sp.spine.MeshAttachment;\n                const isRegion = attachment instanceof sp.spine.RegionAttachment;\n                if (!isMesh && !isRegion) return;\n                attachment = slot.getAttachment().copy();\n                attachment.name = slotName; // + '_copy';\n\n                let texture = skinInfo.texture;\n                let rect = skinInfo.rect\n                let origSize = skinInfo.origSize\n                let offset = skinInfo.offset\n                let degrees = skinInfo.degrees\n\n                const tex2dW = rect.width;\n                const tex2dH = rect.height;\n                const skelTex = new sp.SkeletonTexture({ width: tex2dW, height: tex2dH });\n                skelTex.setRealTexture(texture);\n\n                const region = new sp.spine.TextureAtlasRegion();\n                region.width = tex2dW\n                region.height = tex2dH\n                region.originalWidth = origSize.width\n                region.originalHeight = origSize.height\n                region.offsetX = offset.x\n                region.offsetY = offset.y\n\n                if (degrees != 0) {\n                    region.u = rect.x / texture.width\n                    region.v = rect.y / texture.height\n                    region.u2 = (rect.x + tex2dH) / texture.width\n                    region.v2 = (rect.y + tex2dW) / texture.height\n                } else {\n                    region.u = rect.x / texture.width\n                    region.v = rect.y / texture.height\n                    region.u2 = (rect.x + tex2dW) / texture.width\n                    region.v2 = (rect.y + tex2dH) / texture.height\n                }\n                region.texture = skelTex;\n                region.renderObject = region;\n                region.page = attachment.region.page;\n\n                attachment.region = region;\n                attachment.width = tex2dW;\n                attachment.height = tex2dH;\n                if (isMesh) {\n                    attachment.updateUVs();\n                } else if (isRegion) {\n                    attachment.setRegion(region);\n                    let uvs = attachment.uvs;\n                    if (degrees == 90) {\n                        uvs[2] = region.u;\n                        uvs[3] = region.v2;\n                        uvs[4] = region.u;\n                        uvs[5] = region.v;\n                        uvs[6] = region.u2;\n                        uvs[7] = region.v;\n                        uvs[0] = region.u2;\n                        uvs[1] = region.v2;\n                    } else if (degrees == 270) {\n                        uvs[6] = region.u;\n                        uvs[7] = region.v2;\n                        uvs[0] = region.u;\n                        uvs[1] = region.v;\n                        uvs[2] = region.u2;\n                        uvs[3] = region.v;\n                        uvs[4] = region.u2;\n                        uvs[5] = region.v2;\n                    } else {\n                        uvs[0] = region.u;\n                        uvs[1] = region.v2;\n                        uvs[2] = region.u;\n                        uvs[3] = region.v;\n                        uvs[4] = region.u2;\n                        uvs[5] = region.v;\n                        uvs[6] = region.u2;\n                        uvs[7] = region.v2;\n                    }\n                    attachment.updateOffset()\n                }\n                slot.setAttachment(attachment);\n            }\n        },\n        // 隐藏某个slot\n        setSlotVisible(slotName, visible) {\n            if (this._nativeSkeleton) {\n                this._nativeSkeleton.setSlotVisible(slotName, visible);\n            }\n        },\n        // 隐藏某个bone\n        setBoneVisible(name, visible) {\n            if (this._nativeSkeleton) {\n                this._nativeSkeleton.setBoneVisible(name, visible);\n            }\n        }\n    })\n})\n"]}